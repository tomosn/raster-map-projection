/*!
 * RasterMapProjection v0.0.27  2019-02-10
 *   https://github.com/tomosn/raster-map-projection
 *   A JavaScript library for on-the-fly map projection of raster tiles using WebGL.
 * Copyright (C) 2016-2019 T.Seno
 * All rights reserved. 
 * @license GPL v3 License (http://www.gnu.org/licenses/gpl.html)
 */

"use strict";if("undefined"!=typeof module&&module.exports)var ProjMath=require("./rasterproj-common.js");function ProjTMERC(e,o){this.lam0=e,this.phi0=o}RasterMapProjection.createProjection=function(e,o,t){return new ProjTMERC(e,o)},ProjTMERC.RANGE_RECTANGLE=[-Math.PI,-Math.PI,+Math.PI,+Math.PI],ProjTMERC.prototype.getRange=function(){return ProjTMERC.RANGE_RECTANGLE.slice(0)},ProjTMERC.prototype.getProjCenter=function(){return{lambda:this.lam0,phi:this.phi0}},ProjTMERC.prototype.setProjCenter=function(e,o){this.lam0=e,this.phi0=o},ProjTMERC.prototype.checkXYDomain=function(e,o,t){return!0},ProjTMERC.prototype.forward=function(e,o){const t=Math.cos(o)*Math.sin(e-this.lam0),r=Math.log((1+t)/(1-t))/2;let a=Math.atan2(Math.tan(o),Math.cos(e-this.lam0))-this.phi0;return(a<-Math.PI||Math.PI<=a)&&(a-=2*Math.PI*Math.floor((a+Math.PI)/(2*Math.PI))),{x:r,y:a}},ProjTMERC.prototype.inverse=function(e,o){const t=this.inverse_phi_(e,o);let r=this.inverse_lambda_(e,o);return(r<-Math.PI||Math.PI<=r)&&(r-=2*Math.PI*Math.floor((r+Math.PI)/(2*Math.PI))),{lambda:r,phi:t}},ProjTMERC.prototype.inverse_phi_=function(e,o){return Math.asin(ProjMath.clamp(Math.sin(o+this.phi0)/Math.cosh(e),-1,1))},ProjTMERC.prototype.inverse_lambda_=function(e,o){return Math.atan2(Math.sinh(e),Math.cos(o+this.phi0))+this.lam0},ProjTMERC.prototype.inverse_lambda_atY_=function(e,o){const t=Math.cos(o+this.phi0);if(0===t)return 0<=e?Math.PI/2:-Math.PI/2;const r=Math.sinh(e),a=Math.atan2(r,t)+this.lam0;return t<0&&r<0?a+2*Math.PI:a},ProjTMERC.prototype.containsNorthPole_=function(e,o,t,r){if(t<0||0<e)return!1;const a=(2*Math.floor((o+this.phi0)/(2*Math.PI)-.5)+.5)*Math.PI-this.phi0;for(let e=0;e<256;++e){const t=a+2*Math.PI*e;if(r<t)break;if(o<=t&&t<=r)return!0}return!1},ProjTMERC.prototype.containsSouthPole_=function(e,o,t,r){if(t<0||0<e)return!1;const a=(2*Math.floor((o+this.phi0)/(2*Math.PI)+.5)-.5)*Math.PI-this.phi0;for(let e=0;e<256;++e){const t=a+2*Math.PI*e;if(r<t)break;if(o<=t&&t<=r)return!0}return!1},ProjTMERC.prototype.inverseBoundingBox=function(e,o,t,r){const a=e<=t?e:t,n=e<=t?t:e,i=o<=r?o:r,l=o<=r?r:o;if(a<=0&&0<=n){const e=this.containsNorthPole_(a,i,n,l),o=this.containsSouthPole_(a,i,n,l);if(e&&o)return{lambda:[-Math.PI,+Math.PI],phi:[-Math.PI/2,+Math.PI/2]};if(e||o){const o=this.inversePhiRange_([a,n],[i,l]);return e?{lambda:[-Math.PI,+Math.PI],phi:[o[0],Math.PI/2]}:{lambda:[-Math.PI,+Math.PI],phi:[-Math.PI/2,o[1]]}}}const s=this.inversePhiRange_([a,n],[i,l]);let u=this.inverseLambdaRange_([a,n],[i,l]);return u=this.normalizeLambdaRange_(u),2*Math.PI<u[1]-u[0]&&(u=[-Math.PI,Math.PI]),{lambda:u,phi:s}},ProjTMERC.prototype.mergeRange_=function(e,o){let t=null;return null==e?t=o:null!=o&&(t=e,o[0]<t[0]&&(t[0]=o[0]),t[1]<o[1]&&(t[1]=o[1])),t},ProjTMERC.prototype.normalizeLambdaRange_=function(e){const o=e[0];if(-Math.PI<=o&&o<Math.PI)return e;const t=2*Math.PI*Math.floor((o+Math.PI)/(2*Math.PI));return[e[0]-t,e[1]-t]},ProjTMERC.prototype.inverseLambdaRange_=function(e,o){const t=e[0]<=e[1]?e[0]:e[1],r=e[0]<=e[1]?e[1]:e[0],a=o[0]<=o[1]?o[0]:o[1],n=o[0]<=o[1]?o[1]:o[0],i=this.inverseLambdaRangeAtY_([t,r],[a,n]),l=this.inverseLambdaRangeAtX_([a,n],[t,r]);return this.mergeRange_(l,i)},ProjTMERC.prototype.inverseLambdaRangeAtY_=function(e,o){const t=e[0]<=e[1]?e[0]:e[1],r=e[0]<=e[1]?e[1]:e[0],a=t<=0&&0<=r,n=o.length;let i=null,l=null;for(let e=0;e<n;e++){const n=o[e];let s=a?this.inverse_lambda_atY_(t,n):this.inverse_lambda_(t,n);(null===i||s<i)&&(i=s),(null===l||l<s)&&(l=s),(s=a?this.inverse_lambda_atY_(r,n):this.inverse_lambda_(r,n))<i&&(i=s),l<s&&(l=s)}if(i<-Math.PI||Math.PI<=i){const e=2*Math.PI*Math.floor((i+Math.PI)/(2*Math.PI));i-=e,l-=e}return[i,l]},ProjTMERC.prototype.inverseLambdaRangeAtX_=function(e,o){const t=e[0]<=e[1]?e[0]:e[1],r=e[0]<=e[1]?e[1]:e[0],a=Math.PI*Math.floor((t+this.phi0)/Math.PI)-this.phi0,n=o.length;let i=null,l=null;for(let e=0;e<n;e++){const n=o[e];let s=this.inverse_lambda_(n,t);(null===i||s<i)&&(i=s),(null===l||l<s)&&(l=s),(s=this.inverse_lambda_(n,r))<i&&(i=s),l<s&&(l=s);for(let e=1;e<=2;e++){const o=a+Math.PI*e;if(r<o)break;(s=this.inverse_lambda_(n,o))<i&&(i=s),l<s&&(l=s)}}if(i<-Math.PI||Math.PI<=i){const e=2*Math.PI*Math.floor((i+Math.PI)/(2*Math.PI));i-=e,l-=e}return[i,l]},ProjTMERC.prototype.inversePhiRange_=function(e,o){const t=e[0]<=e[1]?e[0]:e[1],r=e[0]<=e[1]?e[1]:e[0],a=o[0]<=o[1]?o[0]:o[1],n=o[0]<=o[1]?o[1]:o[0],i=this.inversePhiRangeAtY_([t,r],[a,n]),l=this.inversePhiRangeAtX_([a,n],[t,r]);return this.mergeRange_(l,i)},ProjTMERC.prototype.inversePhiRangeAtY_=function(e,o){const t=e[0]<=e[1]?e[0]:e[1],r=e[0]<=e[1]?e[1]:e[0],a=o.length;let n=null,i=null;for(let e=0;e<a;e++){const a=o[e];let l=this.inverse_phi_(t,a);(null===n||l<n)&&(n=l),(null===i||i<l)&&(i=l),(l=this.inverse_phi_(r,a))<n&&(n=l),i<l&&(i=l),t<0&&0<r&&((l=this.inverse_phi_(0,a))<n&&(n=l),i<l&&(i=l))}return[n,i]},ProjTMERC.prototype.inversePhiRangeAtX_=function(e,o){const t=e[0]<=e[1]?e[0]:e[1],r=e[0]<=e[1]?e[1]:e[0],a=Math.PI*(Math.floor((t+this.phi0)/Math.PI+.5)-.5)-this.phi0,n=o.length;let i=null,l=null;for(let e=0;e<n;e++){const n=o[e];let s=this.inverse_phi_(n,t);(null===i||s<i)&&(i=s),(null===l||l<s)&&(l=s),(s=this.inverse_phi_(n,r))<i&&(i=s),l<s&&(l=s);for(let e=1;e<=2;e++){const o=a+Math.PI*e;if(r<o)break;(s=this.inverse_phi_(n,o))<i&&(i=s),l<s&&(l=s)}}return[i,l]},ProjTMERC.prototype.getVertexShaderStr=function(){return ProjTMERC.VERTEX_SHADER_STR},ProjTMERC.prototype.getFragmentShaderStr=function(){return ProjTMERC.FRAGMENT_SHADER_STR},ProjTMERC.VERTEX_SHADER_STR=["precision highp float;","attribute float aCoordX;","attribute float aCoordY;","uniform mat3 uFwdTransform;","uniform vec2 uProjCenter;","varying vec2 vCoord;","varying float vInRange;","uniform float uPointSize;","uniform lowp int uCoordType;","uniform lowp int uTextureType;","const float pi = 3.141592653589793;","const float epsilon = 0.001;","vec2 proj_forward(vec2 center, vec2 lp)","{","  float b = cos(lp.y) * sin(lp.x - center.x);","  float x = log((1.0 + b) / (1.0 - b)) / 2.0;","  float y = atan(tan(lp.y), cos(lp.x - center.x));","  return vec2(x, y - center.y);","}","float check_xy_range(vec2 xy)","{","  return step(-pi, xy.x) - step(pi, xy.x);","}","void main()","{","  vInRange = 1.0;","  vec3 pos;","  if ( uTextureType == 2 || uCoordType == 2 ) {","    pos = vec3(aCoordX, aCoordY, 1.0);","  } else if ( uCoordType == 1 ) {","    pos = uFwdTransform * vec3(aCoordX, aCoordY, 1.0);","    vInRange = check_xy_range(vec2(aCoordX, aCoordY));","  } else {","    vec2 xy = proj_forward(uProjCenter, vec2(aCoordX, aCoordY));","    vInRange = check_xy_range(xy);","    pos = uFwdTransform * vec3(xy.x, xy.y, 1.0);","  }","  vCoord = pos.xy;","  gl_Position = vec4(pos, 1.0);","  gl_PointSize = uPointSize;","}"].join("\n"),ProjTMERC.FRAGMENT_SHADER_STR=["precision highp float;","uniform mat3 uInvTransform;","uniform vec2 uDataCoord1;","uniform vec2 uDataCoord2;","uniform vec2 uClipCoord1;","uniform vec2 uClipCoord2;","uniform lowp int uCoordType;","uniform lowp int uTextureType;","uniform vec2 uCanvasSize;","uniform float uGraticuleIntervalDeg;","uniform sampler2D uTexture;","uniform vec2 uProjCenter;","uniform vec4 uColor;","uniform float uOpacity;","varying vec2 vCoord;","varying float vInRange;","const float pi = 3.141592653589793;","const float epsilon = 0.00000001;","const float xyRadius = pi;","vec2 proj_inverse(vec2 center, vec2 xy)","{","  float d = xy.y + center.y;","  float ep = exp(xy.x);","  float em = exp(-xy.x);","  float ch = (ep + em) / 2.0;","  float sh = (ep - em) / 2.0;","  float phi = asin( clamp( sin(d) / ch, -1.0, 1.0 ) );","  float lam = mod( center.x + atan( sh, cos(d) ) + pi, 2.0 * pi ) - pi;","  return vec2(lam, phi);","}","float inner_xy(vec2 xy)","{","  return 1.0;","}","float validate_xy(vec2 xy)","{","  return 1.0;","}","vec2 graticule_level(vec2 lp, vec2 baseLonLat) {","  vec2 lonlat = degrees(lp);","  if ( 135.0 < abs(baseLonLat.x) ) {","    lonlat.x = mod(lonlat.x + 360.0, 360.0);","  }","  return floor(lonlat / uGraticuleIntervalDeg);","}","bool render_graticule() {","  vec2 viewCoord = (uInvTransform * vec3(vCoord.x, vCoord.y, 1.0)).xy;","  if ( validate_xy(viewCoord) == 0.0 ) {","    return false;","  }","  vec2 lp = proj_inverse(uProjCenter, viewCoord);","  vec2 baseLonLat = degrees(lp);","  float absLat = abs(baseLonLat.y);","  if (81.0 < absLat) {","    return false;","  }","  vec2 v1 = (uInvTransform * vec3(vCoord.x, vCoord.y + 1.0/uCanvasSize.y, 1.0)).xy;","  vec2 v3 = (uInvTransform * vec3(vCoord.x - 1.0/uCanvasSize.x, vCoord.y, 1.0)).xy;","  vec2 v5 = (uInvTransform * vec3(vCoord.x + 1.0/uCanvasSize.x, vCoord.y, 1.0)).xy;","  vec2 v7 = (uInvTransform * vec3(vCoord.x, vCoord.y - 1.0/uCanvasSize.y, 1.0)).xy;","  if ( validate_xy(v1) == 0.0 ||  validate_xy(v3) == 0.0 || validate_xy(v5) == 0.0 || validate_xy(v7) == 0.0) {","    return false;","  }","  vec2 z = -4.0 * graticule_level(lp, baseLonLat);","  z += graticule_level(proj_inverse(uProjCenter, v1), baseLonLat);","  z += graticule_level(proj_inverse(uProjCenter, v3), baseLonLat);","  z += graticule_level(proj_inverse(uProjCenter, v5), baseLonLat);","  z += graticule_level(proj_inverse(uProjCenter, v7), baseLonLat);","  vec2 col = min(abs(z) / 1.9, 1.0);","  float alpha = 0.0;","  if (80.0 < absLat) {","    alpha = col.y;","  } else {","    alpha = max(col.x, col.y);","  }","  if (alpha == 0.0) {","    return false;","  }","  vec3 lineColor = vec3(0.8);","  gl_FragColor = vec4(lineColor, alpha * 0.75);","  return true;","}","void main()","{","  if ( vInRange < 0.5 ) {","    discard;","    return;","  }","  if ( 0.0 < uGraticuleIntervalDeg ) {","    bool rendered = render_graticule();","    if ( !rendered ) {","      discard;","    }","    return;","  }","  vec4 outColor;","  bool isDiscard = false;","  if ( uTextureType == 2 ) {","    float inXY = 1.0;","    vec2 coord;","    if ( uCoordType == 2 ) {","      coord = vCoord;","    } else {","      vec3 viewCoord = uInvTransform * vec3(vCoord.x, vCoord.y, 1.0);","      inXY = inner_xy(viewCoord.xy);","      if ( 0.0 < inXY ) {","        if ( uCoordType == 1 ) {","          coord = viewCoord.xy;","        } else if ( uCoordType == 0 ) {","          coord = proj_inverse(uProjCenter, viewCoord.xy);","        }","      } else {","        isDiscard = true;","        coord = vec2(0.0, 0.0);","      }","    }","    if ( !isDiscard ) {","      vec2 ts = (coord - uDataCoord1) / (uDataCoord2 - uDataCoord1);","      if ( uClipCoord1.x <= ts.x && uClipCoord1.y <= ts.y && ts.x <= uClipCoord2.x && ts.y <= uClipCoord2.y) {","        outColor = texture2D(uTexture, vec2(ts.x, 1.0 - ts.y)) * inXY;","        outColor.a = outColor.a * uOpacity;","      } else {","        isDiscard = true;","      }","    }","  } else if ( uTextureType == 1 ) {","    outColor = texture2D(uTexture, gl_PointCoord);","    isDiscard = (outColor.a == 0.0);","  } else {","    outColor = uColor;","    isDiscard = (outColor.a == 0.0);","  }","  if ( isDiscard ) {","    discard;","  } else {","    gl_FragColor = outColor;","  }","}"].join("\n"),"undefined"!=typeof module&&module.exports&&(module.exports=ProjTMERC);