/*!
 * RasterMapProjection v0.0.26  2018-12-30
 *   https://github.com/tomosn/raster-map-projection
 *   A JavaScript library for on-the-fly map projection of raster tiles using WebGL.
 * Copyright (C) 2016-2018 T.Seno
 * All rights reserved. 
 * @license GPL v3 License (http://www.gnu.org/licenses/gpl.html)
 */

"use strict";if("undefined"!=typeof module&&module.exports)var ProjMath=require("./rasterproj-common.js");function TMERCProjShaderProgram(t){ProjShaderProgram.call(this,t),this.locUnifBaseY_=null}function ProjTMERC(t,o){this.lam0=t,this.phi0=o}RasterMapProjection.createProjection=function(t,o,e){return new ProjTMERC(t,o)},RasterMapProjection.createShaderProgram=function(t,o){const e=new TMERCProjShaderProgram(t);return e.init(o.getVertexShaderStr(),o.getFragmentShaderStr()),e},Object.setPrototypeOf(TMERCProjShaderProgram.prototype,ProjShaderProgram.prototype),TMERCProjShaderProgram.prototype.init=function(t,o){const e=ProjShaderProgram.prototype.init.call(this,t,o);return e&&(this.locUnifBaseY_=this.gl_.getUniformLocation(this.program_,"uBaseY")),e},TMERCProjShaderProgram.prototype.renderLatitudeLine=function(t,o,e){let r=0,n=0;e&&(r=this.getPeriodIndexY_(e[1]),n=this.getPeriodIndexY_(e[3]));const a=(o[0]+o[o.length-1])/2;let i=0;0<a?i=Math.PI/2:a<0&&(i=-Math.PI/2);for(let e=r;e<=n;++e)this.gl_.uniform1f(this.locUnifBaseY_,2*Math.PI*e+i),ProjShaderProgram.prototype.renderLatitudeLine.call(this,t,o)},TMERCProjShaderProgram.prototype.renderLongitudeLine=function(t,o,e){let r=0,n=0;e&&(r=this.getPeriodIndexY_(e[1]),n=this.getPeriodIndexY_(e[3]));for(let e=r;e<=n;++e)this.gl_.uniform1f(this.locUnifBaseY_,2*Math.PI*e+0),ProjShaderProgram.prototype.renderLongitudeLine.call(this,t,o)},TMERCProjShaderProgram.prototype.getPeriodIndexY_=function(t){return Math.floor((t+Math.PI)/(2*Math.PI))},ProjTMERC.RANGE_RECTANGLE=[-Math.PI,-Math.PI,+Math.PI,+Math.PI],ProjTMERC.prototype.getRange=function(){return ProjTMERC.RANGE_RECTANGLE.slice(0)},ProjTMERC.prototype.getProjCenter=function(){return{lambda:this.lam0,phi:this.phi0}},ProjTMERC.prototype.setProjCenter=function(t,o){this.lam0=t,this.phi0=o},ProjTMERC.prototype.checkXYDomain=function(t,o,e){return!0},ProjTMERC.prototype.forward=function(t,o){const e=Math.cos(o)*Math.sin(t-this.lam0),r=Math.log((1+e)/(1-e))/2;let n=Math.atan2(Math.tan(o),Math.cos(t-this.lam0))-this.phi0;return(n<-Math.PI||Math.PI<=n)&&(n-=2*Math.PI*Math.floor((n+Math.PI)/(2*Math.PI))),{x:r,y:n}},ProjTMERC.prototype.inverse=function(t,o){const e=this.inverse_phi_(t,o);let r=this.inverse_lambda_(t,o);return(r<-Math.PI||Math.PI<=r)&&(r-=2*Math.PI*Math.floor((r+Math.PI)/(2*Math.PI))),{lambda:r,phi:e}},ProjTMERC.prototype.inverse_phi_=function(t,o){return Math.asin(ProjMath.clamp(Math.sin(o+this.phi0)/Math.cosh(t),-1,1))},ProjTMERC.prototype.inverse_lambda_=function(t,o){return Math.atan2(Math.sinh(t),Math.cos(o+this.phi0))+this.lam0},ProjTMERC.prototype.inverse_lambda_atY_=function(t,o){const e=Math.cos(o+this.phi0);if(0===e)return 0<=t?Math.PI/2:-Math.PI/2;const r=Math.sinh(t),n=Math.atan2(r,e)+this.lam0;return e<0&&r<0?n+2*Math.PI:n},ProjTMERC.prototype.containsNorthPole_=function(t,o,e,r){if(e<0||0<t)return!1;const n=(2*Math.floor((o+this.phi0)/(2*Math.PI)-.5)+.5)*Math.PI-this.phi0;for(let t=0;t<256;++t){const e=n+2*Math.PI*t;if(r<e)break;if(o<=e&&e<=r)return!0}return!1},ProjTMERC.prototype.containsSouthPole_=function(t,o,e,r){if(e<0||0<t)return!1;const n=(2*Math.floor((o+this.phi0)/(2*Math.PI)+.5)-.5)*Math.PI-this.phi0;for(let t=0;t<256;++t){const e=n+2*Math.PI*t;if(r<e)break;if(o<=e&&e<=r)return!0}return!1},ProjTMERC.prototype.inverseBoundingBox=function(t,o,e,r){const n=t<=e?t:e,a=t<=e?e:t,i=o<=r?o:r,h=o<=r?r:o;if(n<=0&&0<=a){const t=this.containsNorthPole_(n,i,a,h),o=this.containsSouthPole_(n,i,a,h);if(t&&o)return{lambda:[-Math.PI,+Math.PI],phi:[-Math.PI/2,+Math.PI/2]};if(t||o){const o=this.inversePhiRange_([n,a],[i,h]);return t?{lambda:[-Math.PI,+Math.PI],phi:[o[0],Math.PI/2]}:{lambda:[-Math.PI,+Math.PI],phi:[-Math.PI/2,o[1]]}}}const s=this.inversePhiRange_([n,a],[i,h]);let l=this.inverseLambdaRange_([n,a],[i,h]);return l=this.normalizeLambdaRange_(l),2*Math.PI<l[1]-l[0]&&(l=[-Math.PI,Math.PI]),{lambda:l,phi:s}},ProjTMERC.prototype.mergeRange_=function(t,o){let e=null;return null==t?e=o:null!=o&&(e=t,o[0]<e[0]&&(e[0]=o[0]),e[1]<o[1]&&(e[1]=o[1])),e},ProjTMERC.prototype.normalizeLambdaRange_=function(t){const o=t[0];if(-Math.PI<=o&&o<Math.PI)return t;const e=2*Math.PI*Math.floor((o+Math.PI)/(2*Math.PI));return[t[0]-e,t[1]-e]},ProjTMERC.prototype.inverseLambdaRange_=function(t,o){const e=t[0]<=t[1]?t[0]:t[1],r=t[0]<=t[1]?t[1]:t[0],n=o[0]<=o[1]?o[0]:o[1],a=o[0]<=o[1]?o[1]:o[0],i=this.inverseLambdaRangeAtY_([e,r],[n,a]),h=this.inverseLambdaRangeAtX_([n,a],[e,r]);return this.mergeRange_(h,i)},ProjTMERC.prototype.inverseLambdaRangeAtY_=function(t,o){const e=t[0]<=t[1]?t[0]:t[1],r=t[0]<=t[1]?t[1]:t[0],n=e<=0&&0<=r,a=o.length;let i=null,h=null;for(let t=0;t<a;t++){const a=o[t];let s=n?this.inverse_lambda_atY_(e,a):this.inverse_lambda_(e,a);(null===i||s<i)&&(i=s),(null===h||h<s)&&(h=s),(s=n?this.inverse_lambda_atY_(r,a):this.inverse_lambda_(r,a))<i&&(i=s),h<s&&(h=s)}if(i<-Math.PI||Math.PI<=i){const t=2*Math.PI*Math.floor((i+Math.PI)/(2*Math.PI));i-=t,h-=t}return[i,h]},ProjTMERC.prototype.inverseLambdaRangeAtX_=function(t,o){const e=t[0]<=t[1]?t[0]:t[1],r=t[0]<=t[1]?t[1]:t[0],n=Math.PI*Math.floor((e+this.phi0)/Math.PI)-this.phi0,a=o.length;let i=null,h=null;for(let t=0;t<a;t++){const a=o[t];let s=this.inverse_lambda_(a,e);(null===i||s<i)&&(i=s),(null===h||h<s)&&(h=s),(s=this.inverse_lambda_(a,r))<i&&(i=s),h<s&&(h=s);for(let t=1;t<=2;t++){const o=n+Math.PI*t;if(r<o)break;(s=this.inverse_lambda_(a,o))<i&&(i=s),h<s&&(h=s)}}if(i<-Math.PI||Math.PI<=i){const t=2*Math.PI*Math.floor((i+Math.PI)/(2*Math.PI));i-=t,h-=t}return[i,h]},ProjTMERC.prototype.inversePhiRange_=function(t,o){const e=t[0]<=t[1]?t[0]:t[1],r=t[0]<=t[1]?t[1]:t[0],n=o[0]<=o[1]?o[0]:o[1],a=o[0]<=o[1]?o[1]:o[0],i=this.inversePhiRangeAtY_([e,r],[n,a]),h=this.inversePhiRangeAtX_([n,a],[e,r]);return this.mergeRange_(h,i)},ProjTMERC.prototype.inversePhiRangeAtY_=function(t,o){const e=t[0]<=t[1]?t[0]:t[1],r=t[0]<=t[1]?t[1]:t[0],n=o.length;let a=null,i=null;for(let t=0;t<n;t++){const n=o[t];let h=this.inverse_phi_(e,n);(null===a||h<a)&&(a=h),(null===i||i<h)&&(i=h),(h=this.inverse_phi_(r,n))<a&&(a=h),i<h&&(i=h),e<0&&0<r&&((h=this.inverse_phi_(0,n))<a&&(a=h),i<h&&(i=h))}return[a,i]},ProjTMERC.prototype.inversePhiRangeAtX_=function(t,o){const e=t[0]<=t[1]?t[0]:t[1],r=t[0]<=t[1]?t[1]:t[0],n=Math.PI*(Math.floor((e+this.phi0)/Math.PI+.5)-.5)-this.phi0,a=o.length;let i=null,h=null;for(let t=0;t<a;t++){const a=o[t];let s=this.inverse_phi_(a,e);(null===i||s<i)&&(i=s),(null===h||h<s)&&(h=s),(s=this.inverse_phi_(a,r))<i&&(i=s),h<s&&(h=s);for(let t=1;t<=2;t++){const o=n+Math.PI*t;if(r<o)break;(s=this.inverse_phi_(a,o))<i&&(i=s),h<s&&(h=s)}}return[i,h]},ProjTMERC.prototype.getVertexShaderStr=function(){return ProjTMERC.VERTEX_SHADER_STR},ProjTMERC.prototype.getFragmentShaderStr=function(){return ProjTMERC.FRAGMENT_SHADER_STR},ProjTMERC.VERTEX_SHADER_STR=["precision highp float;","attribute float aCoordX;","attribute float aCoordY;","uniform mat3 uFwdTransform;","uniform vec2 uProjCenter;","varying vec2 vCoord;","varying float vInRange;","uniform float uBaseY;","uniform float uPointSize;","uniform lowp int uCoordType;","uniform lowp int uTextureType;","const float pi = 3.141592653589793;","const float epsilon = 0.001;","vec2 proj_forward(vec2 center, vec2 lp, float baseY)","{","  float b = cos(lp.y) * sin(lp.x - center.x);","  float x = log((1.0 + b) / (1.0 - b)) / 2.0;","  float y = atan(tan(lp.y), cos(lp.x - center.x));","  float dy = y - baseY + pi;","  if ( dy < 0.0 || 2.0*pi <= dy ) {","    y = y - 2.0*pi * floor(dy / (2.0*pi));","  }","  return vec2(x, y - center.y);","}","float check_xy_range(vec2 xy)","{","  return step(-pi, xy.x) - step(pi, xy.x);","}","void main()","{","  vInRange = 1.0;","  vec3 pos;","  if ( uTextureType == 2 || uCoordType == 2 ) {","    pos = vec3(aCoordX, aCoordY, 1.0);","  } else if ( uCoordType == 1 ) {","    pos = uFwdTransform * vec3(aCoordX, aCoordY, 1.0);","    vInRange = check_xy_range(vec2(aCoordX, aCoordY));","  } else {","    vec2 xy = proj_forward(uProjCenter, vec2(aCoordX, aCoordY), uBaseY);","    vInRange = check_xy_range(xy);","    pos = uFwdTransform * vec3(xy.x, xy.y, 1.0);","  }","  vCoord = pos.xy;","  gl_Position = vec4(pos, 1.0);","  gl_PointSize = uPointSize;","}"].join("\n"),ProjTMERC.FRAGMENT_SHADER_STR=["precision highp float;","uniform mat3 uInvTransform;","uniform vec2 uDataCoord1;","uniform vec2 uDataCoord2;","uniform vec2 uClipCoord1;","uniform vec2 uClipCoord2;","uniform lowp int uCoordType;","uniform lowp int uTextureType;","uniform sampler2D uTexture;","uniform vec2 uProjCenter;","uniform vec4 uColor;","uniform float uOpacity;","varying vec2 vCoord;","varying float vInRange;","const float pi = 3.141592653589793;","const float epsilon = 0.00000001;","const float xyRadius = pi;","vec2 proj_inverse(vec2 center, vec2 xy)","{","  float d = xy.y + center.y;","  float ep = exp(xy.x);","  float em = exp(-xy.x);","  float ch = (ep + em) / 2.0;","  float sh = (ep - em) / 2.0;","  float phi = asin( clamp( sin(d) / ch, -1.0, 1.0 ) );","  float lam = mod( center.x + atan( sh, cos(d) ) + pi, 2.0 * pi ) - pi;","  return vec2(lam, phi);","}","float inner_xy(vec2 xy)","{","  return 1.0;","}","void main()","{","  if ( vInRange < 0.5 ) {","    discard;","    return;","  }","  vec4 outColor;","  bool isDiscard = false;","  if ( uTextureType == 2 ) {","    float inXY = 1.0;","    vec2 coord;","    if ( uCoordType == 2 ) {","      coord = vCoord;","    } else {","      vec3 viewCoord = uInvTransform * vec3(vCoord.x, vCoord.y, 1.0);","      inXY = inner_xy(viewCoord.xy);","      if ( 0.0 < inXY ) {","        if ( uCoordType == 1 ) {","          coord = viewCoord.xy;","        } else if ( uCoordType == 0 ) {","          coord = proj_inverse(uProjCenter, viewCoord.xy);","        }","      } else {","        isDiscard = true;","        coord = vec2(0.0, 0.0);","      }","    }","    if ( !isDiscard ) {","      vec2 ts = (coord - uDataCoord1) / (uDataCoord2 - uDataCoord1);","      if ( uClipCoord1.x <= ts.x && uClipCoord1.y <= ts.y && ts.x <= uClipCoord2.x && ts.y <= uClipCoord2.y) {","        outColor = texture2D(uTexture, vec2(ts.x, 1.0 - ts.y)) * inXY;","        outColor.a = outColor.a * uOpacity;","      } else {","        isDiscard = true;","      }","    }","  } else if ( uTextureType == 1 ) {","    outColor = texture2D(uTexture, gl_PointCoord);","    isDiscard = (outColor.a == 0.0);","  } else {","    outColor = uColor;","    isDiscard = (outColor.a == 0.0);","  }","  if ( isDiscard ) {","    discard;","  } else {","    gl_FragColor = outColor;","  }","}"].join("\n"),"undefined"!=typeof module&&module.exports&&(module.exports=ProjTMERC);